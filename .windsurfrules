# chartChek: AI-Powered Compliance Assistant for Behavioral Health Facilities

Welcome to **chartChek**, an advanced compliance assistant designed to streamline regulatory compliance for mental health and substance-abuse recovery centers. Built with NextJS 15 and OpenAI's Assistants API, chartChek provides instant, accurate, and actionable insights tailored to each facility's unique requirements.

## Tech Stack

- **Frontend**: Next.js 15 with App Router
- **AI**: OpenAI Assistants API
- **Database**: Supabase with vector storage capabilities
- **Authentication**: Supabase Auth
- **Deployment**: [Your deployment platform]

## Purpose

The primary goal of this project is to serve as a **Joint Commission/DHCS compliance assistant**, equipping behavioral health facilities with an intelligent chatbot to assist in navigating regulatory standards, tracking compliance, and managing documentation. Each instance of chartChek can be customized with facility-specific information.

## Key Features

### **AI-Powered Assistance**
- Leverages OpenAI's Assistants API for intelligent, context-aware responses
- Maintains conversation history through Assistant threads
- Supports file attachments and citations in responses

### **Document Management**
- Processes and stores facility documents securely
- Enables document search and citation in conversations
- Supports multiple file formats including PDFs

### **Regulatory Knowledge Base**
- Pre-loaded with Joint Commission and DHCS standards
- Context-aware responses using vector similarity search
- File citations to track information sources

### **Multi-User Support**
- Secure authentication and authorization
- Facility-specific customization
- Isolated data storage per facility

### **Real-time Updates**
- WebSocket-based message streaming
- Progress tracking for document processing
- Instant response notifications

## Architecture Overview

### OpenAI Assistants Integration
- Utilizes Assistants API for maintaining conversation context
- Implements thread management for persistent conversations
- Supports file attachments and tool calls

### NextJS App Router Structure
```
app/
├── api/         # API routes for Assistant interactions
├── chat/        # Chat interface and message components
├── documents/   # Document management interface
├── auth/        # Authentication pages
└── layout.tsx   # Root layout with providers
```

### Data Flow
1. User authentication via Supabase
2. Document processing and vector storage
3. Assistant thread creation and management
4. Real-time message streaming and updates

## Development Setup

1. Clone the repository
2. Install dependencies:
   ```bash
   npm install
   ```
3. Configure environment variables:
   ```env
   OPENAI_API_KEY=your_key
   SUPABASE_URL=your_url
   SUPABASE_ANON_KEY=your_key
   ```
4. Run the development server:
   ```bash
   npm run dev
   ```

## Configuration

### Assistant Configuration
- Master assistant ID management
- User-specific assistant instances
- Thread and message management

### Vector Storage
- Document embedding and storage
- Similarity search configuration
- File attachment handling

## Contributing

[Your contribution guidelines]

## License

[Your license information]
###
db migrations @ C:\Users\justo\source\repos\biggeye\chartchek\supabase\migrations\*

###

always refer to recent openAI assistants documentation:

https://platform.openai.com/docs/assistants